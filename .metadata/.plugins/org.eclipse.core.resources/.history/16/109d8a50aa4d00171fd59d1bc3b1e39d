import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;



public class TopCust {

	
	public static class MyMapper extends Mapper<LongWritable, Text, Text, LongWritable>
	{
		public void map(LongWritable key, Text value, Context c) throws IOException, InterruptedException{
		String [] str = value.toString().split(";");
		String custID = str[1];
		long cost = Long.parseLong(str[7]);
		c.write(new Text (custID), new LongWritable(cost));
	}
	}
	
	public static class MyReducer extends Reducer<Text, LongWritable, Text, LongWritable>
	{
		private long max = 0L;
		
		String CustID = "";
		
		public void reduce(Text key, Iterable<LongWritable> values, Context c) throws IOException, InterruptedException
		{
			long sum = 0L;
			
			for(LongWritable val : values)
			{
	         sum+=val.get();
	         
	         if(max <sum)
	         {
	        	 max=sum;
	        	 CustID = key.toString();;
	         }
	         
			}
		}
		
		public void cleanup(Context c) throws IOException, InterruptedException
		{
			c.write(new Text(CustID),new LongWritable(max));
		}
		
	}
	
	public static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException {
		
		 Configuration conf = new Configuration();
		    //conf.set("name", "value")
		    
		    Job job = Job.getInstance(conf, "Highest amount spent by customer");
		    job.setJarByClass(TopCust.class);
		    job.setMapperClass(MyMapper.class);
		    
		    //job.setPartitionerClass(MyPart.class);
		    job.setReducerClass(MyReducer.class);
		    //job.setNumReduceTasks(0);
		    job.setOutputKeyClass(Text.class);
		    job.setOutputValueClass(LongWritable.class);
		    FileInputFormat.addInputPath(job, new Path(args[0]));
		    FileOutputFormat.setOutputPath(job, new Path(args[1]));
		    System.exit(job.waitForCompletion(true) ? 0 : 1);
	}

}
