import java.io.IOException;
import java.util.TreeMap;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Partitioner;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.Reducer.Context;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

import Top5_ViableProductSubclass.MyReducer.MyPartitioner;



public class Top5_ViableProductSubclass{

	public static class MyMapper extends Mapper<LongWritable, Text,  Text, Text>
	{
		public void map(LongWritable key, Text value, Context c) throws IOException, InterruptedException{
			String [] str = value.toString().split(",");
			String val=str[2]+","+str[8]+","+str[7];
			c.write(new Text(str[4]), new Text(val));
			
		}
	}
     public static class MyReducer extends Reducer<Text, Text, NullWritable, Text>{
    	 private TreeMap<Long,String> product = new TreeMap<Long,String>();
    	 long totalsale=0,totalcost=0;
    	 String Age=null;	 
    	 
    	 protected void reduce(Text key, Iterable<Text> value, Context context){
    		 
    		 for(Text val:value)
    		 {
    			 String[] str = val.toString().split(",");
    			 totalsale=totalsale+Long.parseLong(str[1]);
    			 totalcost=totalcost+Long.parseLong(str[2]);
    			 Age=str[0];
    		 }
    			 if(product.size()>5) product.remove(product.firstKey()); 
    			
    	 
    	 }
    		 
    		 public void cleanup(Context c) throws IOException, InterruptedException 
 			{
    			
    						for(Long l:product.descendingMap().keySet()){
    							c.write(null, new Text(product.get(l)));
    						}
    					}
    			     
 				}
    		 public static class MyPartitioner extends
    		 Partitioner < Text, Text >
    		 {
    			 
    			    public int getPartition(Text key, Text value, int numReduceTasks)
    			    {
    			  	  String[] str = value.toString().split(",");
    				      if(str[0].trim().equals("A"))
    				    	  return 0;
    				      else if(str[0].trim().equals("B"))
    				    	  return 1;
    				      else if(str[0].trim().equals("C"))
    				    	  return 2;
    				      else if(str[0].trim().equals("D"))
    				    	  return 3;
    				      else if(str[0].trim().equals("E"))
    				    	  return 4;
    				      else if(str[0].trim().equals("F"))
    				    	  return 5;
    				      else if(str[0].trim().equals("G"))
    				    	  return 6;
    				      else if(str[0].trim().equals("H"))
    				    	  return 7;
    				      else if(str[0].trim().equals("I"))
    				    	  return 8;
    				      else if(str[0].trim().equals("J"))
    				    	  return 9;
    				      else if(str[0].trim().equals("K"))
    				    	  return 10;
    				      return 11;
    				        
    			    }
    		 
    			 }
     
     public static void main(String args[]) throws  IOException, ClassNotFoundException, InterruptedException
 	{
 	Configuration conf = new Configuration();

    //conf.set("name", "value"
    
    Job job = Job.getInstance(conf, "Highest amount spent by customer");
    job.setJarByClass(TopCust.class);
    job.setMapperClass(MyMapper.class);
    job.setPartitionerClass(MyPartitioner.class);
    job.setReducerClass(MyReducer.class);
    //job.setNumReduceTasks(0);
    job.setOutputKeyClass(Text.class);
    job.setOutputValueClass(LongWritable.class);
    FileInputFormat.addInputPath(job, new Path(args[0]));
    FileOutputFormat.setOutputPath(job, new Path(args[1]));
    System.exit(job.waitForCompletion(true) ? 0 : 1);
 }
     }
    		 
    	 
    		 
   
     
