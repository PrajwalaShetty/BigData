import java.io.*;

import org.apache.hadoop.io.FloatWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Mapper.Context;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.fs.*;
import org.apache.hadoop.mapreduce.lib.input.*;
import org.apache.hadoop.mapreduce.lib.output.*;


public class AverageSal {
	
	public static class MapClass extends Mapper<LongWritable, Text, Text, FloatWritable>
	   {
	         	  
	    	  public void map(LongWritable key, Text EmpData, Context context)
	    			   throws IOException, InterruptedException {
	    			  String[] word = EmpData.toString().split(",");
	    			  String sex = word[3];
	    			  try {
	    			   Float salary = Float.parseFloat(word[8]);
	    			   context.write(new Text(sex), new FloatWritable(salary));
	    			  } catch (Exception e) {
	    			   e.printStackTrace();
	    			  }
	      }
	   }
	
	  public static class ReduceClass extends Reducer<Text, FloatWritable, Text, Text> {
		  public void reduce(Text key, Iterable<FloatWritable> valueList,
				   Context con) throws IOException, InterruptedException {
				  try {
				   Float total = (float) 0;
				   int count = 0;
				   for (FloatWritable var : valueList) {
				    total += var.get();
				    System.out.println("reducer " + var.get());
				    count++;
				   }
				   Float avg = (Float) total / count;
				   String out = "Total: " + total + " :: " + "Average: " + avg;
				   con.write(key, new Text(out));
				  } catch (Exception e) {
				   e.printStackTrace();
				  }
	   }
	  }
	  public static void main(String[] args) throws Exception {
		    Configuration conf = new Configuration();
		    //conf.set("name", "value")
		    
		    Job job = Job.getInstance(conf, "total and average salary");
		    job.setJarByClass(AverageSal.class);
		    job.setMapperClass(MapClass.class);
		    //job.setCombinerClass(ReduceClass.class);
		    job.setReducerClass(ReduceClass.class);
		    //job.setNumReduceTasks(0);
		    job.setOutputKeyClass(Text.class);
		    job.setOutputValueClass(LongWritable.class);
		    FileInputFormat.addInputPath(job, new Path(args[0]));
		    FileOutputFormat.setOutputPath(job, new Path(args[1]));
		    System.exit(job.waitForCompletion(true) ? 0 : 1);
	 
		  }
}


