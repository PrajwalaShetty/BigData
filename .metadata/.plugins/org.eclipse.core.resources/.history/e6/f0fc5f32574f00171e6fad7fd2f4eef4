import java.io.IOException;
import java.util.TreeMap;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Partitioner;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;



public class Top5_ViableProductSubclass {

	
	public static class MyMapper extends Mapper<LongWritable, Text, Text, Text>
	{
		public void map(LongWritable key, Text value, Context c) throws IOException, InterruptedException
		{
			String str[] = value.toString().split(";");
			String prod_id = str[5];
			String age_sales= str[2]+"-"+str[8];
		
			c.write(new Text(prod_id), new Text(age_sales));
		}
	}
	
	
	
	
	public static class MyReducer extends Reducer<Text, Text, NullWritable, Text>
	{
		private TreeMap<Long, String> Product = new TreeMap<Long, String>();
		
		public void reduce(Text key, Iterable<Text> values, Context c)
		{
			String ProdID= "";
			String Age="";
			
			long sum = 0L;
			
			for(Text val : values)
			{
				
			String[] str =val.toString().split("-");
			sum=sum+Long.parseLong(str[1]);
			Age=str[0];
			}
		String Pdt = key.toString()+"-"+Age;
		Product.put(sum,Pdt);
		if (Product.size()>5)
		{
			Product.remove(Product.firstKey());
		}
		
		}
	
		public void cleanup(Context c) throws IOException, InterruptedException
		{
			for(Long var: Product.descendingMap().keySet())
			{
				for(Long t : Product.descendingMap().keySet()){
					c.write(NullWritable.get(),new Text(Product.get(t)));

			}
		}
		
	}
	public static class MyPartitioner extends Partitioner<LongWritable, Text>
	{

		@Override
		public int getPartition(LongWritable key, Text value, int numReduceTasks) 
		{
			
			String[] str = value.toString().split("-");
			
			
		      if(str[0].trim().equals("A"))
		    	  return 0;
		      else if(str[0].trim().equals("B"))
		    	  return 1;
		      else if(str[0].trim().equals("C"))
		    	  return 2;
		      else if(str[0].trim().equals("D"))
		    	  return 3;
		      else if(str[0].trim().equals("E"))
		    	  return 4;
		      else if(str[0].trim().equals("F"))
			  return 5;
		      else if(str[0].trim().equals("G"))
		    	  return 6;
		      else if(str[0].trim().equals("H"))
		    	  return 7;
		      else if(str[0].trim().equals("I"))
		    	  return 8;
		      else if(str[0].trim().equals("J"))
		    	  return 9;
		      else if(str[0].trim().equals("K"))
		    	  return 10;
	return 11;
		}
		
	}

	
	
	public static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException {
		

		 Configuration conf = new Configuration();
		    //conf.set("name", "value")
		    
		    Job job = Job.getInstance(conf, "Top 5 Viable Products");
		    job.setJarByClass(Top5_ViableProductSubclass.class);
		    job.setMapperClass(MyMapper.class);
		    
		    job.setPartitionerClass(MyPartitioner.class);
		    //job.setReducerClass(MyReducer.class);
		    job.setNumReduceTasks(11);
		    job.setMapOutputKeyClass(LongWritable.class);
		    job.setMapOutputValueClass(Text.class);
		    FileInputFormat.addInputPath(job, new Path(args[0]));
		    FileOutputFormat.setOutputPath(job, new Path(args[1]));
		    System.exit(job.waitForCompletion(true) ? 0 : 1);
	}


	}
}


